// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["paper"], function(paper) {
    var Ball;
    return Ball = (function() {

      function Ball(paper, options) {
        this.getMass = __bind(this.getMass, this);

        this.getVelocity = __bind(this.getVelocity, this);

        this.setMass = __bind(this.setMass, this);

        this.setVelocity = __bind(this.setVelocity, this);

        this.fullReset = __bind(this.fullReset, this);

        this.positionReset = __bind(this.positionReset, this);

        this.elementInit = __bind(this.elementInit, this);
        this.paper = paper;
        this.config = {
          radiusFactor: 2.5,
          color: "brown",
          verticalOffset: 20,
          horizontalOffset: 5,
          left: true,
          maxHeight: this.paper.view.size.height,
          maxWidth: this.paper.view.size.width
        };
        this.config.mass = options.mass;
        this.config.velocity = options.velocity;
        this.setVelocity(this.config.velocity);
        this.setMass(this.config.mass);
        this.config.left = options.left;
        this.config.color = options.color;
        this.elementInit();
      }

      Ball.prototype.elementInit = function() {
        var _x, _y;
        _x = this.config.left ? this.config.horizontalOffset + this.radius : this.config.maxWidth - this.config.horizontalOffset - this.radius;
        _y = this.config.maxHeight - this.config.verticalOffset - this.radius;
        this.original = new this.paper.Point(_x, _y);
        if (!this.element) {
          this.element = new this.paper.Path.Circle(this.original, this.radius);
        } else {

        }
        this.element.fillColor = this.config.color;
        return this.paper.view.draw();
      };

      Ball.prototype.positionReset = function() {
        this.element.position.x = this.original.x;
        return this.element.position.y = this.original.y;
      };

      Ball.prototype.fullReset = function() {
        this.positionReset();
        this.setVelocity(this.config.velocity);
        this.setMass(this.config.mass);
        return this.elementInit();
      };

      Ball.prototype.setVelocity = function(velocity) {
        return this.velocity = velocity;
      };

      Ball.prototype.setMass = function(mass) {
        this.mass = mass;
        return this.radius = this.mass * this.config.radiusFactor;
      };

      Ball.prototype.getVelocity = function() {
        return this.velocity;
      };

      Ball.prototype.getMass = function() {
        return this.mass;
      };

      return Ball;

    })();
  });

}).call(this);
