// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["paper"], function(paper) {
    var Ball;
    return Ball = (function() {

      function Ball(paper, options) {
        this.getMass = __bind(this.getMass, this);

        this.getVelocity = __bind(this.getVelocity, this);

        this.setMass = __bind(this.setMass, this);

        this.setVelocity = __bind(this.setVelocity, this);

        this.fullReset = __bind(this.fullReset, this);

        this.positionReset = __bind(this.positionReset, this);

        this.click = __bind(this.click, this);

        this.init = __bind(this.init, this);

        var key, value;
        this.config = {
          radius: 30,
          color: "brown",
          mass: 10,
          velocity: 10,
          verticalOffset: 70,
          horizontalOffset: 50,
          left: true
        };
        this.paper = paper;
        this.settings = {
          height: this.paper.view.size.height,
          width: this.paper.view.size.width
        };
        for (key in options) {
          value = options[key];
          this.config[key] = value;
        }
        this.velocity = this.config.velocity;
        this.mass = this.config.mass;
        this.init();
        this.click();
      }

      Ball.prototype.init = function() {
        var _x;
        _x = this.config.left ? this.config.horizontalOffset : this.settings.width - this.config.horizontalOffset;
        this.original = new this.paper.Point(_x, this.settings.height - this.config.verticalOffset);
        this.element = new this.paper.Path.Circle(this.original, this.config.radius);
        return this.element.fillColor = this.config.color;
      };

      Ball.prototype.click = function() {
        var _this = this;
        return this.element.attach("mouseclick", function(event) {
          console.log("mouse enter area function");
          return alert("hello world");
        });
      };

      Ball.prototype.positionReset = function() {
        this.element.position.x = this.original.x;
        return this.element.position.y = this.original.y;
      };

      Ball.prototype.fullReset = function() {
        this.positionReset();
        this.velocity = this.config.velocity;
        return this.mass = this.config.mass;
      };

      Ball.prototype.setVelocity = function(velocity) {
        return this.velocity = velocity;
      };

      Ball.prototype.setMass = function(mass) {
        return this.mass = mass;
      };

      Ball.prototype.getVelocity = function() {
        return this.velocity;
      };

      Ball.prototype.getMass = function() {
        return this.mass;
      };

      return Ball;

    })();
  });

}).call(this);
