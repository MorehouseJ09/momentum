// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["paper"], function(paper) {
    var Ball;
    return Ball = (function() {

      function Ball(paper, container, options) {
        this.paper = paper;
        this.container = container;
        this.getMass = __bind(this.getMass, this);

        this.getVelocity = __bind(this.getVelocity, this);

        this.setMass = __bind(this.setMass, this);

        this.setVelocity = __bind(this.setVelocity, this);

        this.setTempVelocity = __bind(this.setTempVelocity, this);

        this.velocityReset = __bind(this.velocityReset, this);

        this.positionReset = __bind(this.positionReset, this);

        this.attrReset = __bind(this.attrReset, this);

        this.init = __bind(this.init, this);

        this.tag = container.find("span:nth-child(2)");
        this.input = container.find("input");
        this.config = {
          ballSizeChange: false,
          radiusFactor: 6,
          verticalOffset: 150,
          horizontalOffset: this.paper.view.size.width * 0.25,
          left: true,
          maxHeight: this.paper.view.size.height,
          maxWidth: this.paper.view.size.width
        };
        this.config.mass = options.mass;
        this.config.velocity = options.velocity;
        this.config.left = options.left;
        this.config.color = options.color;
        this.velocity = options.velocity;
        this.config.mass = options.mass;
        this.mass = options.mass;
        this.radius = this.mass * this.config.radiusFactor;
        this.init();
      }

      Ball.prototype.init = function() {
        var _x, _y;
        _x = this.config.left ? this.config.horizontalOffset + this.radius : this.config.maxWidth - this.config.horizontalOffset - this.radius;
        _y = this.config.maxHeight - this.config.verticalOffset;
        this.original = new this.paper.Point(_x, _y);
        this.circle = new this.paper.Path.Circle(this.original, this.radius);
        this.text = new this.paper.PointText(new this.paper.Point(this.original.x, this.original.y + 4));
        this.element = new this.paper.Layer([this.circle, this.text]);
        this.circle.fillColor = this.config.color;
        this.circle.smooth();
        this.text.justification = "center";
        this.text.fillColor = "white";
        this.text.content = this.getMass() + "kg";
        return this.paper.view.draw();
      };

      Ball.prototype.attrReset = function(oldRadius) {
        this.text.content = this.getMass() + "kg";
        this.circle.scale(this.radius / oldRadius);
        this.original.x = this.config.left ? this.config.horizontalOffset + this.radius : this.config.maxWidth - this.config.horizontalOffset - this.radius;
        this.original.y = this.config.maxHeight - this.config.verticalOffset;
        this.element.position.x = this.original.x;
        this.element.position.y = this.original.y;
        return this.paper.view.draw();
      };

      Ball.prototype.positionReset = function() {
        this.element.position.x = this.original.x;
        this.element.position.y = this.original.y;
        return this.paper.view.draw();
      };

      Ball.prototype.velocityReset = function() {
        return this.velocity = this.config.velocity;
      };

      Ball.prototype.setTempVelocity = function(velocity) {
        return this.velocity = velocity;
      };

      Ball.prototype.setVelocity = function(velocity, frameVelocity) {
        var label;
        this.config.velocity = parseInt(velocity);
        this.velocity = this.config.velocity;
        label = velocity < 0 ? -1 * velocity : velocity;
        label -= frameVelocity;
        this.tag.text(label);
        return this.input.attr("value", label);
      };

      Ball.prototype.setMass = function(mass) {
        var oldRadius;
        this.config.mass = mass;
        this.mass = mass;
        oldRadius = this.radius;
        if (this.config.ballSizeChange) {
          this.radius = this.mass * this.config.radiusFactor;
        }
        return this.attrReset(oldRadius);
      };

      Ball.prototype.getVelocity = function() {
        return this.velocity;
      };

      Ball.prototype.getMass = function() {
        return this.mass;
      };

      return Ball;

    })();
  });

}).call(this);
