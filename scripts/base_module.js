// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'ball', 'frame', 'velocity_button'], function(paper, ball, frame, VelocityButton) {
    var BaseModule;
    return BaseModule = (function() {
      var triggerChange, triggerReset;

      triggerReset = function() {
        return false;
      };

      triggerChange = function() {
        return false;
      };

      BaseModule.prototype.elementSettings = {
        a: {
          color: "red",
          velocity: 20,
          mass: 8,
          radius: 30,
          left: true
        },
        b: {
          color: "blue",
          velocity: -20,
          mass: 19,
          radius: 40,
          left: false
        },
        frame: {
          velocity: 5
        }
      };

      function BaseModule(canvas, options) {
        this.eventDelegator = __bind(this.eventDelegator, this);
        this.canvas = canvas;
        this.paper = new paper.PaperScope();
        this.tool = new this.paper.Tool();
        this.paper.setup(this.canvas);
        this.view = new this.paper.View(canvas);
        this.elements = {
          a: new ball(this.paper, this.elementSettings.a),
          b: new ball(this.paper, this.elementSettings.b),
          frame: new frame(this.paper, this.elementSettings.frame)
        };
        this.paper.view.draw();
        this.eventDelegator();
      }

      BaseModule.prototype.eventDelegator = function() {
        var _this = this;
        this.view.draw = function() {};
        return this.tool.onMouseDown = function() {
          return _this.animate();
        };
      };

      BaseModule.prototype.animate = function() {
        var collision, counter, left, leftRunning, right, rightRunning, run,
          _this = this;
        left = this.elements.a;
        right = this.elements.b;
        frame = this.elements.frame;
        counter = 0;
        collision = false;
        rightRunning = true;
        leftRunning = true;
        run = function() {
          var fv, ml, mr, vl, vlf, vr, vrf;
          vr = right.getVelocity();
          vl = left.getVelocity();
          fv = frame.getVelocity();
          if (leftRunning) {
            left.element.position.x += vl + fv;
          }
          if (rightRunning) {
            right.element.position.x += vr + fv;
          }
          if (!collision && left.element.position.x + left.radius >= right.element.position.x - right.radius) {
            collision = true;
            ml = left.getMass();
            mr = right.getMass();
            vlf = ((vl * (ml - mr)) + (2 * mr * vr)) / (ml + mr);
            vrf = ((vr * (mr - ml)) + (2 * ml * vl)) / (ml + mr);
            left.setVelocity(vlf);
            right.setVelocity(vrf);
          }
          if (collision && left.element.position.x <= left.original.x) {
            leftRunning = false;
            left.fullReset();
          }
          if (collision && right.element.position.x <= left.original.x) {
            leftRunning = false;
            right.fullReset();
          }
          if (collision && right.element.position.x >= right.original.x) {
            rightRunning = false;
            right.fullReset();
          }
          if (collision && left.element.position.x >= right.original.x) {
            rightRunning = false;
            right.fullReset();
          }
          _this.paper.view.draw();
          if (rightRunning || leftRunning) {
            return setTimeout(run, 10);
          }
        };
        return run();
      };

      return BaseModule;

    })();
  });

}).call(this);
