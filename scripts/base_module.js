// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'ball', 'frame'], function(paper, ball, frame) {
    var BaseModule;
    return BaseModule = (function() {

      function BaseModule(canvas, options) {
        this.play = __bind(this.play, this);
        this.canvas = canvas;
        this.paper = new paper.PaperScope();
        this.tool = new this.paper.Tool();
        this.paper.setup(this.canvas);
        this.view = new this.paper.View(canvas);
        this.options = options;
        this.view.draw = function() {
          return console.log("what goes in the draw?");
        };
        this.elements = {
          a: new ball(this.paper, this.options.a),
          b: new ball(this.paper, this.options.b),
          frame: new frame(this.paper, this.options.frame)
        };
        this.playing = false;
        this.paper.view.draw();
      }

      BaseModule.prototype.play = function() {
        var collision, left, leftRunning, right, rightRunning, run,
          _this = this;
        left = this.elements.a;
        right = this.elements.b;
        frame = this.elements.frame;
        collision = false;
        rightRunning = true;
        leftRunning = true;
        run = function() {
          var collisionResponse, collisionStatus, fv, leftStatus, lm, lv, rightStatus, rm, rv;
          console.log(collision);
          lv = left.getVelocity();
          lm = left.getMass();
          rv = right.getVelocity();
          rm = right.getMass();
          fv = frame.getVelocity();
          (leftStatus = function() {
            var reset;
            reset = function() {
              leftRunning = false;
              return left.positionReset();
            };
            if (leftRunning) {
              if (lv === 0 || lm === 0 || (lv + fv) === 0) {
                reset();
              } else if (parseInt(left.element.position.x) < parseInt(left.original.x)) {
                reset();
              } else if (parseInt(left.element.position.x) > _this.paper.view.size.width) {
                reset();
              } else {
                left.element.position.x += lv + fv;
              }
              return _this.paper.view.draw();
            }
          })();
          (rightStatus = function() {
            var reset;
            reset = function() {
              rightRunning = false;
              return right.positionReset();
            };
            if (rightRunning) {
              if (rv === 0 || rm === 0 || rv + fv === 0) {
                reset();
              } else if (parseInt(right.element.position.x) > parseInt(right.original.x)) {
                reset();
              } else if (right.element.position.x < 0) {
                reset();
              } else {
                right.element.position.x += rv + fv;
              }
              return _this.paper.view.draw();
            }
          })();
          collisionResponse = function() {
            var lfv, rfv;
            lm = left.getMass();
            rm = right.getMass();
            lfv = ((lv * (lm - rm)) + (2 * rm * rv)) / (lm + rm);
            rfv = ((rv * (rm - lm)) + (2 * lm * lv)) / (lm + rm);
            left.setVelocity(lfv);
            return right.setVelocity(rfv);
          };
          (collisionStatus = function() {
            var leftRight, rightLeft;
            if (collision) {
              return;
            }
            leftRight = left.element.position.x + left.radius;
            rightLeft = right.element.position.x - right.radius;
            if (rightLeft <= leftRight) {
              right.element.position.x = leftRight + right.radius;
              _this.paper.view.draw();
              collisionResponse();
              return collision = true;
            }
          })();
          if (leftRunning || rightRunning) {
            return setTimeout(run, 10);
          } else {
            _this.paper.view.draw();
            return _this.playing = false;
          }
        };
        if (!this.playing) {
          this.playing = true;
          return run();
        }
      };

      return BaseModule;

    })();
  });

}).call(this);
