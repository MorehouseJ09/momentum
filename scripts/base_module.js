// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'velocity_button'], function(paper, VelocityButton) {
    var BaseModule;
    return BaseModule = (function() {
      var globalConfig, triggerChange, triggerReset;

      triggerReset = function() {
        return false;
      };

      triggerChange = function() {
        return false;
      };

      globalConfig = {
        a: {
          radius: 10,
          color: "brown",
          mass: 10,
          velocity: 10
        },
        b: {
          radius: 5,
          color: "blue",
          mass: 8,
          velocity: 8
        },
        frame: {
          velocity: 0
        },
        general: {
          bottomOffset: 20,
          horizontalOffset: 20
        }
      };

      function BaseModule(canvas) {
        this.eventDelegator = __bind(this.eventDelegator, this);

        this.runAnimation = __bind(this.runAnimation, this);

        this.reset = __bind(this.reset, this);
        this.canvas = canvas;
        this.paper = new paper.PaperScope();
        this.paper.setup(this.canvas);
        this.settings = {
          height: this.paper.view.size.height,
          width: this.paper.view.size.width
        };
        this.elements = {};
        this.paper.view.draw();
        this.eventDelegator();
      }

      BaseModule.prototype.reset = function() {
        var _x, _y;
        _y = this.settings.height - globalConfig.general.bottomOffset;
        _x = globalConfig.general.horizontalOffset;
        elements.a = new this.paper.Path.Circle(new this.paper.Point(_x, _y), globalConfig.a.radius);
        return elements.b = new this.paper.Path.Circle(new this.paper.Point(this.settings.width - _x, _y), globalConfig.b.radius);
      };

      BaseModule.prototype.runAnimation = function() {};

      BaseModule.prototype.eventDelegator = function() {
        var triangle;
        triangle = new this.paper.Path.RegularPolygon(new this.paper.Point(100, 100), 3, 4);
        return triangle.strokeColor = "blue";
      };

      return BaseModule;

    })();
  });

}).call(this);
